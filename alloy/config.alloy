// this configures logging of Alloy itself
logging {
  level  = "debug"
  format = "logfmt"
}

// if needed:
//livedebugging {
//  enabled = true
//}


// REGULAR OTEL STUFF

otelcol.receiver.otlp "default" {
  grpc { }
  http { }
  output {
    metrics = [otelcol.processor.resourcedetection.default.input]
    logs    = [otelcol.processor.resourcedetection.default.input]
    traces  = [otelcol.processor.resourcedetection.default.input]
  }
}

otelcol.processor.resourcedetection "default" {
  detectors = ["env", "system"] // add "gcp", "ec2", "ecs", "elastic_beanstalk", "eks", "lambda", "azure", "aks", "consul", "heroku"  if you want to use cloud resource detection
  system {
    hostname_sources = ["os"]
  }
  output {
    metrics = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
    traces  = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
    logs    = [otelcol.processor.transform.add_custom_log_labels.input]
  }
}

otelcol.processor.transform "add_custom_log_labels" {
  error_mode = "ignore"
  log_statements {
    context    = "log"
    statements = [
      "set(attributes[\"testLabel1\"], \"someValue\")",
    ]
  }
  output {
    logs    = [otelcol.processor.transform.drop_unneeded_resource_attributes.input]
  }
}

otelcol.processor.transform "drop_unneeded_resource_attributes" {
  error_mode = "ignore"
  trace_statements {
    context    = "resource"
    statements = [
      "delete_key(attributes, \"k8s.pod.start_time\")",
      "delete_key(attributes, \"os.description\")",
      "delete_key(attributes, \"os.type\")",
      "delete_key(attributes, \"process.command_args\")",
      "delete_key(attributes, \"process.executable.path\")",
      "delete_key(attributes, \"process.pid\")",
      "delete_key(attributes, \"process.runtime.description\")",
      "delete_key(attributes, \"process.runtime.name\")",
      "delete_key(attributes, \"process.runtime.version\")",
    ]
  }
  metric_statements {
    context    = "resource"
    statements = [
      "delete_key(attributes, \"k8s.pod.start_time\")",
      "delete_key(attributes, \"os.description\")",
      "delete_key(attributes, \"os.type\")",
      "delete_key(attributes, \"process.command_args\")",
      "delete_key(attributes, \"process.executable.path\")",
      "delete_key(attributes, \"process.pid\")",
      "delete_key(attributes, \"process.runtime.description\")",
      "delete_key(attributes, \"process.runtime.name\")",
      "delete_key(attributes, \"process.runtime.version\")",
    ]
  }
  log_statements {
    context    = "resource"
    statements = [
      "delete_key(attributes, \"k8s.pod.start_time\")",
      "delete_key(attributes, \"os.description\")",
      "delete_key(attributes, \"os.type\")",
      "delete_key(attributes, \"process.command_args\")",
      "delete_key(attributes, \"process.executable.path\")",
      "delete_key(attributes, \"process.pid\")",
      "delete_key(attributes, \"process.runtime.description\")",
      "delete_key(attributes, \"process.runtime.name\")",
      "delete_key(attributes, \"process.runtime.version\")",
    ]
  }
  output {
    metrics = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]
    logs    = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]
    traces  = [otelcol.processor.transform.reduce_otel_demo_cardinality.input]
  }
}  


// (This component is not part of the starter AppOlly production config in Grafana's docs.)
// This adds a custom set of OTTL transformations that normalizes span names,
// to remove high-cardinality IDs (like cart ID, recommendation ID)
otelcol.processor.transform "reduce_otel_demo_cardinality" {

  error_mode = "ignore"

  trace_statements {
    context    = "span"
    statements = [
      "replace_match(name, \"GET /api/cart*\", \"GET /api/cart\")",
      "replace_match(name, \"GET /api/recommendations*\", \"GET /api/recommendations\")",
      "replace_match(name, \"GET /api/products*\", \"GET /api/products\")",
    ]
  }

  output {
    metrics = [otelcol.processor.transform.add_resource_attributes_as_metric_attributes.input]
    logs    = [otelcol.processor.batch.default.input]
    traces  = [
      otelcol.processor.batch.default.input,
      otelcol.connector.host_info.default.input,
    ]
  }
}

otelcol.connector.host_info "default" {
  host_identifiers = ["host.name"]
  output {
    metrics = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.transform "add_resource_attributes_as_metric_attributes" {
  error_mode = "ignore"
  metric_statements {
    context    = "datapoint"
    statements = [
      "set(attributes[\"deployment.environment\"], resource.attributes[\"deployment.environment\"])",
      "set(attributes[\"service.version\"], resource.attributes[\"service.version\"])",
    ]
  }
  output {
    metrics = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    metrics = [otelcol.exporter.otlphttp.grafana_cloud.input]
    logs    = [otelcol.exporter.otlphttp.grafana_cloud.input]
    traces  = [otelcol.exporter.otlphttp.grafana_cloud.input]
  }
}

otelcol.exporter.otlphttp "grafana_cloud" {
  client {
    endpoint = env("CLOUD_OTLP_ENDPOINT")
    auth     = otelcol.auth.basic.grafana_cloud.handler
  }
}
otelcol.auth.basic "grafana_cloud" {
  username = env("CLOUD_OTLP_USERNAME")
  password = env("CLOUD_OTLP_PASSWORD")
}